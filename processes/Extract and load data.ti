#region Prolog
vNow     = TIMST (NOW(), '\Y\m\d\h\i\s' );
vLogFile = '/Logs/Processes/pull_data_from_remote_cube_(' | pCube | ')_' | vNow | '.log';
vUser = TM1User;
vAPIKey = ATTRS('}Clients', vUser, 'PASaaS API Key');
vGrant_type = 'urn:ibm:params:oauth:grant-type:apikey';
vTokenUrl = 'https://iam.test.cloud.ibm.com/identity/token?apikey=' | vAPIKey |'&grant_type=' | vGrant_type;

#Get Token
ExecuteHttpRequest( 'POST', vTokenUrl );
responseCode = HttpResponseGetStatusCode();
vResponseBody  = HttpResponseGetBody();
vResponseBodyLength = LONG ( vResponseBody );
vAccessTokenStr = '"access_token":"';
vAccessTokenStart = SCAN( vAccessTokenStr, vResponseBody );
vAccessTokenLength = LONG( vAccessTokenStr );
vResponseBodyAccessTokenStrToEnd= SUBST( vResponseBody, vAccessTokenStart + vAccessTokenLength, vResponseBodyLength - vAccessTokenStart);
vAccessTokenEnd = SCAN( '"', vResponseBodyAccessTokenStrToEnd ) - 1;
vBearerToken = SUBST( vResponseBodyAccessTokenStrToEnd, 1, vAccessTokenEnd );
ASCIIOUTPUT( vLogFile, 'accessToken: ' | vBearerToken );

#Authenticate
vUrl = pBaseURL | pEnvironmentID | '/v0/tm1/' | pRemoteDatabase | '/api/v1/Configuration';
ExecuteHttpRequest( 'GET', vUrl,  '-k', '-h Authorization:Bearer ' | vBearerToken, '-h Content-Type:application/json' );
ASCIIOUTPUT( vLogFile, vUrl );
responseCode = HttpResponseGetStatusCode();
ASCIIOUTPUT( vLogFile, 'Response Code: ' | NumberToString( responseCode ));
responseBody = HttpResponseGetBody();
ASCIIOUTPUT( vLogFile, responseBody);

#Execute data extract process
vUrl = pBaseURL | pEnvironmentID | '/v0/tm1/' | pRemoteDatabase | '/api/v1/Processes(''' | pExportProcess | ''')/tm1.ExecuteWithReturn';
vBody = '
{ "Parameters": [ 
    {
      "Name": "pCube",
      "Value": "' | pCube | '"
    },
    {
      "Name": "pExportDir",
      "Value": "' | pExportDir | '"
    },
    {
      "Name": "pExportFile",
      "Value": "' | pExportFile | '"
    }
  ]
}';

ExecuteHttpRequest( 'POST', vUrl,  '-k', '-h Content-Type:application/json', '-d ' | vBody  );
ASCIIOUTPUT( vLogFile, vUrl );
ASCIIOUTPUT( vLogFile, vBody );
responseCode = HttpResponseGetStatusCode();
ASCIIOUTPUT( vLogFile, 'Response Code: ' | NumberToString( responseCode ));
response = HttpResponseGetBody();
ASCIIOUTPUT( vLogFile, response);
IF ( SCAN ( 'QuitCalled', response) > 0);
    ProcessQuit;
ENDIF;

vLastDimIndex = CubeDimensionCountGet( pCube );
vLastDim      = TABDIM( pCube, vLastDimIndex );

DatasourceNameForServer             = pBaseURL | pEnvironmentID | '/v0/tm1/' | pRemoteDatabase | '/api/v1/Contents(''Files'')/Contents(''' | pExportDir | ''')/Contents(''' | pExportFile | ''')/Content';
DataSourceType          = 'CHARACTERDELIMITED';

#endregion
#region Data
IF ( vLastDimIndex = 2 );
    IF (CELLISUPDATEABLE  ( pCube, v1, v2 ) = 1);
        IF ( DTYPE ( vLastDim , v2 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v3 ), pCube, v1, v2 );
        ELSE;
            CELLPUTS ( v3, pCube, v1, v2 );
        ENDIF;
    ENDIF;
ELSEIF ( vLastDimIndex = 3 );
    IF (CELLISUPDATEABLE  ( pCube, v1, v2, v3 ) = 1);
        IF ( DType ( vLastDim , v3 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v4 ), pCube, v1, v2, v3 );
        ELSE;
            CELLPUTS ( v4, pCube, v1, v2, v4 );
        ENDIF;
    ENDIF;
ELSEIF ( vLastDimIndex = 4 );
    IF (CELLISUPDATEABLE  ( pCube, v1, v2, v3, v4 ) = 1);
        IF ( DTYPE ( vLastDim , v4 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v5 ), pCube, v1, v2, v3, v4 );
        ELSE;
            CELLPUTS ( v5, pCube, v1, v2, v4, v5 );
        ENDIF;
    ENDIF;
ELSEIF ( vLastDimIndex = 5 );
    IF (CELLISUPDATEABLE  ( pCube, v1, v2, v3, v4, v5 ) = 1);
        IF ( DTYPE ( vLastDim , v5 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v6 ), pCube, v1, v2, v3, v4, v5 );
        ELSE;
            CELLPUTS ( v6, pCube, v1, v2, v4, v5, v6 );
        ENDIF;
    ENDIF;
ELSEIF ( vLastDimIndex = 6 );
    IF (CELLISUPDATEABLE  ( pCube, v1, v2, v3, v4, v5, v6 ) = 1);
        IF ( DTYPE ( vLastDim , v6 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v7 ), pCube, v1, v2, v3, v4, v5, v6 );
        ELSE;
            CELLPUTS ( v7, pCube, v1, v2, v4, v5, v6, v7 );
        ENDIF;
    ENDIF;
ELSEIF ( vLastDimIndex = 7 );
    IF (CELLISUPDATEABLE  ( pCube, v1, v2, v3, v4, v5, v6, v7 ) = 1);
        IF ( DTYPE ( vLastDim , v7 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v8 ), pCube, v1, v2, v3, v4, v5, v6, v7 );
        ELSE;
            CELLPUTS ( v8, pCube, v1, v2, v3, v4, v5, v6, v7 );
        ENDIF;
    ENDIF;
ELSEIF ( vLastDimIndex = 8 );
    IF ( CELLISUPDATEABLE( pCube, v1, v2, v3, v4, v5, v6, v7, v8 ) = 1);
        IF ( DTYPE ( vLastDim , v8 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v9 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8 );
        ELSE;
            CELLPUTS ( v9, pCube, v1, v2, v3, v4, v5, v6, v7, v8 );
        ENDIF;
    ENDIF;
ELSEIF ( vLastDimIndex = 9 );
    IF ( CELLISUPDATEABLE( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9 ) = 1);
        IF ( DTYPE ( vLastDim , v9 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v10 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9 );
        ELSE;
            CELLPUTS ( v10, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9 );
        ENDIF;
    ENDIF;
ELSEIF ( vLastDimIndex = 10);
    IF ( CELLISUPDATEABLE( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 ) = 1);
        IF ( DTYPE ( vLastDim , v10 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v11 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 );
        ELSE;
            CELLPUTS ( v11, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 );
        ENDIF;
    ENDIF;
ELSEIF ( vLastDimIndex = 11 );
    IF ( CELLISUPDATEABLE( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 ) = 1);
        IF ( DTYPE ( vLastDim , v11 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v12 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 );
        ELSE;
            CELLPUTS ( v12, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 );
        ENDIF;
    ENDIF;
ELSEIF ( vLastDimIndex = 12 );
    IF ( CELLISUPDATEABLE( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 ) = 1);
        IF ( DTYPE ( vLastDim , v12 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v13 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 );
        ELSE;
            CELLPUTS ( v13, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12 );
        ENDIF;
    ENDIF;
ELSEIF ( vLastDimIndex = 13 );
    IF ( CELLISUPDATEABLE( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 ) = 1);
        IF ( DTYPE ( vLastDim , v13 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v14 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 );
        ELSE;
            CELLPUTS ( v14, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 );
        ENDIF;
    ENDIF;
ELSEIF ( vLastDimIndex = 14);
    IF ( CELLISUPDATEABLE( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 ) = 1);
        IF ( DTYPE ( vLastDim , v14 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v15 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 );
        ELSE;
            CELLPUTS ( v15, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14 );
        ENDIF;
    ENDIF;
ELSEIF ( vLastDimIndex = 15 );
    IF ( CELLISUPDATEABLE( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 ) = 1);
        IF ( DTYPE ( vLastDim , v15 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v16 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 );
        ELSE;
            CELLPUTS ( v16, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15 );
        ENDIF;
    ENDIF;
ELSEIF ( vLastDimIndex = 16 );
    IF ( CELLISUPDATEABLE( pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 ) = 1);
        IF ( DTYPE ( vLastDim , v16 ) @= 'N' );
            CELLPUTN ( StringToNumber ( v17 ), pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );
        ELSE;
            CELLPUTS ( v17, pCube, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16 );
        ENDIF;
    ENDIF;
ENDIF;


#endregion
#region Epilog


#endregion